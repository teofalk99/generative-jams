import { EPreProcessor, EPreProcessorGroup, GetWithPromiseCallBackType } from "./types";
export declare const BASE_RUNWARE_URLS: {
    PRODUCTION: string;
    TEST: string;
};
export declare const removeFromAray: <T>(col: T[], targetElem: T) => void;
export declare const getIntervalWithPromise: (callback: GetWithPromiseCallBackType, { debugKey, timeOutDuration, shouldThrowError, }: {
    debugKey?: string | undefined;
    timeOutDuration?: number | undefined;
    shouldThrowError?: boolean | undefined;
}) => Promise<unknown>;
export declare const fileToBase64: (file: File) => Promise<unknown>;
export declare const getUUID: () => string;
export declare const isValidUUID: (uuid: string) => boolean;
export declare const compact: (value: any, data: any) => any;
export declare const getPreprocessorType: (processor: EPreProcessor) => EPreProcessorGroup;
export declare const accessDeepObject: ({ key, data, useZero, shouldReturnString, }: {
    key: string;
    data: Record<string, any>;
    useZero?: boolean | undefined;
    shouldReturnString?: boolean | undefined;
}) => Record<string, any>;
export declare const delay: (time: number, milliseconds?: number) => Promise<unknown>;
export declare class MockFile {
    create: (name: string, size: number, mimeType: string) => any;
}
export declare const RETRY_SDK_COUNTS: {
    GLOBAL: number;
    REQUEST_IMAGES: number;
};
export declare const remove1Mutate: (col: any, targetElem: any) => void;
export declare const removeListener: (listeners: any[], listener: any) => any[];
export declare const removeAllKeyListener: ({ listeners, key, }: {
    listeners: any[];
    key: any;
}) => any[];
export declare enum LISTEN_TO_IMAGES_KEY {
    REQUEST_IMAGES = "REQUEST_IMAGES"
}
export declare const evaluateNonTrue: ({ key, value, }: {
    key: string;
    value: any;
}) => {
    [x: string]: any;
};
