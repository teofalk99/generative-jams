import { IEnhancedPrompt, IError, IImage, IImageToText, IPromptEnhancer, IRemoveImageBackground, IRequestImage, IRequestImageToText, IUpscaleGan, ListenerType, ReconnectingWebsocketProps, RunwareBaseType, SdkType, IControlNetPreprocess, IControlNetImage, IRemoveImage, ITextToImage } from "./types";
export declare class RunwareBase {
    _ws: ReconnectingWebsocketProps | any;
    _listeners: ListenerType[];
    _apiKey: string;
    _url?: string;
    _globalMessages: Record<string, any>;
    _globalImages: IImage[];
    _globalError: IError | undefined;
    _connectionSessionUUID: string | undefined;
    _invalidAPIkey: string | undefined;
    _sdkType: SdkType;
    constructor({ apiKey, url }: RunwareBaseType);
    protected isWebsocketReadyState: () => boolean;
    protected addListener({ lis, groupKey, taskUUID, }: {
        lis: (v: any) => any;
        groupKey?: string;
        taskUUID: string;
    }): {
        destroy: () => void;
    };
    protected connect(): void;
    protected send: (msg: Object) => void;
    private destroy;
    private uploadImage;
    private listenToImages;
    private globalListener;
    requestImages({ outputType, outputFormat, uploadEndpoint, checkNsfw, positivePrompt, negativePrompt, seedImage, maskImage, strength, height, width, model, steps, scheduler, seed, CFGScale, clipSkip, usePromptWeighting, numberResults, controlNet, lora, onPartialImages, includeCost, customTaskUUID, retry, }: IRequestImage): Promise<ITextToImage[] | undefined>;
    controlNetPreProcess: ({ inputImage, preProcessor, height, width, outputType, outputFormat, highThresholdCanny, lowThresholdCanny, includeHandsAndFaceOpenPose, includeCost, customTaskUUID, }: IControlNetPreprocess) => Promise<IControlNetImage | null>;
    requestImageToText: ({ inputImage, includeCost, customTaskUUID, }: IRequestImageToText) => Promise<IImageToText>;
    removeImageBackground: ({ inputImage, outputType, outputFormat, rgba, postProcessMask, returnOnlyMask, alphaMatting, alphaMattingForegroundThreshold, alphaMattingBackgroundThreshold, alphaMattingErodeSize, includeCost, customTaskUUID, }: IRemoveImageBackground) => Promise<IRemoveImage[]>;
    upscaleGan: ({ inputImage, upscaleFactor, outputType, outputFormat, includeCost, customTaskUUID, }: IUpscaleGan) => Promise<IImage[]>;
    enhancePrompt: ({ prompt, promptMaxLength, promptVersions, includeCost, customTaskUUID, }: IPromptEnhancer) => Promise<IEnhancedPrompt[]>;
    ensureConnection(): Promise<unknown>;
    private getSimilarImages;
    private getSingleMessage;
    private handleIncompleteImages;
    disconnect: () => Promise<void>;
    private connected;
}
