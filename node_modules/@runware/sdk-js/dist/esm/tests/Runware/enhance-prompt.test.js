"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const test_utils_1 = require("../test-utils");
const mockServer_1 = require("../mockServer");
const Runware_1 = require("../../Runware");
vitest_1.vi.mock("../../Runware/utils", async () => {
    const actual = await vitest_1.vi.importActual("../../Runware/utils");
    return Object.assign(Object.assign({}, actual), { fileToBase64: vitest_1.vi.fn().mockReturnValue("FILE_TO_BASE_64"), getIntervalWithPromise: vitest_1.vi.fn(), getUUID: vitest_1.vi.fn().mockImplementation(() => "UNIQUE_UID") });
});
(0, vitest_1.describe)("When user request to enhance prompt", async () => {
    const { mockServer, runware } = await (0, mockServer_1.startMockServer)();
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.beforeEach)(() => {
        mockServer.stop();
    });
    (0, vitest_1.beforeAll)(async () => {
        vitest_1.vi.spyOn(runware, "uploadImage").mockReturnValue(test_utils_1.testExamples.imageUploadRes);
    });
    (0, vitest_1.test)("it should give an enhanced prompt", async () => {
        const globalListenerSpy = vitest_1.vi.spyOn(runware, "globalListener");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.enhancePrompt({
            prompt: "Mock prompt",
            promptMaxLength: 200,
            promptVersions: 4,
        });
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith({
            prompt: "Mock prompt",
            taskUUID: test_utils_1.mockTaskUUID,
            promptMaxLength: 200,
            promptVersions: 4,
            taskType: Runware_1.ETaskType.PROMPT_ENHANCE,
        });
        (0, vitest_1.expect)(globalListenerSpy).toHaveBeenCalledWith({
            taskUUID: test_utils_1.mockTaskUUID,
        });
    });
    (0, vitest_1.test)("it should give an enhanced prompt with default config", async () => {
        const globalListenerSpy = vitest_1.vi.spyOn(runware, "globalListener");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.enhancePrompt({
            prompt: "Mock prompt",
        });
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith({
            prompt: "Mock prompt",
            taskUUID: test_utils_1.mockTaskUUID,
            promptMaxLength: 380,
            promptVersions: 1,
            taskType: Runware_1.ETaskType.PROMPT_ENHANCE,
        });
        (0, vitest_1.expect)(globalListenerSpy).toHaveBeenCalledWith({
            taskUUID: test_utils_1.mockTaskUUID,
        });
    });
});
