"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const test_utils_1 = require("../test-utils");
const mockServer_1 = require("../mockServer");
const Runware_1 = require("../../Runware");
vitest_1.vi.mock("../../Runware/utils", async () => {
    const actual = await vitest_1.vi.importActual("../../Runware/utils");
    return Object.assign(Object.assign({}, actual), { fileToBase64: vitest_1.vi.fn().mockReturnValue("FILE_TO_BASE_64"), getIntervalWithPromise: vitest_1.vi.fn(), getUUID: vitest_1.vi.fn().mockImplementation(() => "UNIQUE_UID") });
});
(0, vitest_1.describe)("When user request an image", async () => {
    const { mockServer, runware } = await (0, mockServer_1.startMockServer)();
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.beforeEach)(() => {
        mockServer.stop();
    });
    (0, vitest_1.beforeAll)(async () => {
        vitest_1.vi.spyOn(runware, "uploadImage").mockReturnValue(test_utils_1.testExamples.imageUploadRes);
    });
    (0, vitest_1.test)("it should request image without an image initiator", async () => {
        const imageUploadSpy = vitest_1.vi.spyOn(runware, "uploadImage");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.requestImages(test_utils_1.testExamples.imageReq);
        (0, vitest_1.expect)(imageUploadSpy).not.toHaveBeenCalled();
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign({}, test_utils_1.testExamples.imageRes));
    });
    (0, vitest_1.test)("it should request image with an image initiator", async () => {
        const imageUploadSpy = vitest_1.vi.spyOn(runware, "uploadImage");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.requestImages(Object.assign(Object.assign({}, test_utils_1.testExamples.imageReq), { seedImage: test_utils_1.mockTextImageUpload }));
        (0, vitest_1.expect)(imageUploadSpy).toHaveBeenCalled();
        (0, vitest_1.expect)(imageUploadSpy).toHaveBeenCalledTimes(1);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign(Object.assign({}, test_utils_1.testExamples.imageRes), { seedImage: test_utils_1.testExamples.imageUploadRes.imageUUID, taskType: Runware_1.ETaskType.IMAGE_INFERENCE }));
    });
    (0, vitest_1.test)("it should request image with an image initiator and image mask initiator", async () => {
        const imageUploadSpy = vitest_1.vi.spyOn(runware, "uploadImage");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.requestImages(Object.assign(Object.assign({}, test_utils_1.testExamples.imageReq), { seedImage: test_utils_1.mockTextImageUpload, maskImage: test_utils_1.mockTextImageUpload }));
        (0, vitest_1.expect)(imageUploadSpy).toHaveBeenCalledTimes(2);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign(Object.assign({}, test_utils_1.testExamples.imageRes), { seedImage: test_utils_1.testExamples.imageUploadRes.imageUUID, maskImage: test_utils_1.testExamples.imageUploadRes.imageUUID, taskType: Runware_1.ETaskType.IMAGE_INFERENCE }));
    });
    (0, vitest_1.test)("it should request image with an image initiator and image mask initiator and control net", async () => {
        const imageUploadSpy = vitest_1.vi.spyOn(runware, "uploadImage");
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware.requestImages(Object.assign(Object.assign({}, test_utils_1.testExamples.imageReq), { seedImage: test_utils_1.mockTextImageUpload, maskImage: test_utils_1.mockTextImageUpload, controlNet: [Object.assign(Object.assign({}, test_utils_1.testExamples.controlNet), { model: "control_net_model" })] }));
        (0, vitest_1.expect)(imageUploadSpy).toHaveBeenCalledTimes(3);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign(Object.assign({}, test_utils_1.testExamples.imageRes), { seedImage: test_utils_1.testExamples.imageUploadRes.imageUUID, maskImage: test_utils_1.testExamples.imageUploadRes.imageUUID, controlNet: [
                {
                    controlMode: Runware_1.EControlMode.CONTROL_NET,
                    endStep: 20,
                    guideImage: "NEW_IMAGE_UID",
                    model: "control_net_model",
                    startStep: 0,
                    weight: 1,
                },
            ], taskType: Runware_1.ETaskType.IMAGE_INFERENCE }));
    });
    (0, vitest_1.test)("it should request multiple images in parallel", async () => {
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        const listenToImages = vitest_1.vi.spyOn(runware, "listenToImages");
        await Promise.all([
            runware.requestImages(Object.assign({}, test_utils_1.testExamples.imageReq)),
            runware.requestImages(Object.assign(Object.assign({}, test_utils_1.testExamples.imageReq), { positivePrompt: "cat" })),
        ]);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledTimes(2);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign(Object.assign({}, test_utils_1.testExamples.imageRes), { taskType: Runware_1.ETaskType.IMAGE_INFERENCE }));
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith(Object.assign(Object.assign({}, test_utils_1.testExamples.imageRes), { positivePrompt: "cat", taskType: Runware_1.ETaskType.IMAGE_INFERENCE }));
        (0, vitest_1.expect)(listenToImages).toHaveBeenCalledTimes(2);
    });
});
