"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const utils_1 = require("../../Runware/utils");
const test_utils_1 = require("../test-utils");
const mockServer_1 = require("../mockServer");
const Runware_1 = require("../../Runware");
vitest_1.vi.mock("../../Runware/utils", async () => {
    const actual = await vitest_1.vi.importActual("../../Runware/utils");
    return Object.assign(Object.assign({}, actual), { fileToBase64: vitest_1.vi.fn().mockReturnValue("FILE_TO_BASE_64"), getIntervalWithPromise: vitest_1.vi.fn(), getUUID: vitest_1.vi.fn().mockReturnValue("UNIQUE_UID") });
});
(0, vitest_1.describe)("When user uploads an image:", async () => {
    const { mockServer, runware } = await (0, mockServer_1.startMockServer)();
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.beforeEach)(() => {
        mockServer.stop();
    });
    (0, vitest_1.test)("it should accept string during image upload", async () => {
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware["uploadImage"]("IMAGE_UPLOAD");
        (0, vitest_1.expect)(utils_1.fileToBase64).to.not.toHaveBeenCalled();
        (0, vitest_1.expect)(sendSpy).toBeCalledTimes(1);
    });
    (0, vitest_1.test)("it should accept file during image upload", async () => {
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        await runware["uploadImage"](test_utils_1.mockUploadFile);
        (0, vitest_1.expect)(utils_1.fileToBase64).toHaveBeenCalled();
        (0, vitest_1.expect)(sendSpy).toBeCalledTimes(1);
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith({
            image: test_utils_1.mockFileToBase64,
            taskUUID: test_utils_1.mockTaskUUID,
            taskType: Runware_1.ETaskType.IMAGE_UPLOAD,
        });
    });
    (0, vitest_1.test)("it should upload image successfully", async () => {
        const sendSpy = vitest_1.vi.spyOn(runware, "send");
        const globalListenerSpy = vitest_1.vi.spyOn(runware, "globalListener");
        await runware["uploadImage"](test_utils_1.mockTextImageUpload);
        (0, vitest_1.expect)(utils_1.fileToBase64).to.not.toHaveBeenCalled();
        (0, vitest_1.expect)(sendSpy).toHaveBeenCalledWith({
            image: test_utils_1.mockTextImageUpload,
            taskUUID: test_utils_1.mockTaskUUID,
            taskType: Runware_1.ETaskType.IMAGE_UPLOAD,
        });
        (0, vitest_1.expect)(globalListenerSpy).toHaveBeenCalledWith({
            taskUUID: test_utils_1.mockTaskUUID,
        });
        (0, vitest_1.expect)(utils_1.getIntervalWithPromise).toHaveBeenCalledTimes(1);
    });
});
